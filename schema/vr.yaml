# VR uses yaml as the source document for json schema
#
# To convert vr.yaml to vr.json:
#   make vr.json
# You'll probably have to `pip install pyyaml` first.
#
# To watch for changes and update automatically:
#   make watch &


$schema: "http://json-schema.org/schema#"
title: "GA4GH-VR-Definitions"
type: object

definitions:
  # VR definitions are presented top-down.  Everything rolls up to
  # Variation, which is a polymorphic abstraction of many kinds of
  # variation.

  ############################################################################
  # Variation
  Variation:
    description: >-
      A polymorphic representation of variation
    oneOf:
      - $ref: "#/definitions/Text"
      - $ref: "#/definitions/Allele"
      # future expansion of variation types will go here
    discriminator:
      propertyName: type

  Text:
    type: object
    properties:
      type:
        type: string
        enum: [Text]
        default: Text
      id:
        $ref: "#/definitions/Id"
      definition:
        type: string
        description: >-
          An textual representation of variation intended to capture
          variation descriptions that cannot be parsed, but still
          treated as variation.

  Allele:
    description: An assertion of a sequence state at a Location.
    type: object
    properties:
      type:
        type: string
        enum: [Allele]
        default: Allele
      id:
        $ref: "#/definitions/Id"
      location:
        $ref: "#/definitions/Location"
      state:
        $ref: "#/definitions/State"
    additionalProperties: false

  ############################################################################
  # Locations

  Location:
    description: >-
      A Location represents a span on a specific sequence.
    oneOf:
      - $ref: "#/definitions/SequenceLocation"
    discriminator:
      propertyName: type
  
  SequenceLocation:
    type: object
    properties:
      type:
        type: string
        enum: [SequenceLocation]
        default: SequenceLocation
      id:
        $ref: "#/definitions/Id"
      sequence_id:
        type: string
      interval:
        $ref: "#/definitions/Interval"

  ############################################################################
  # Interval
  # * SimpleInterval
  # * NestedInterval

  Interval:
    description: >-
      A Interval represents a span of sequence.  Positions are
      always represented by contiguous spans using interbase
      coordinates.

      This definition of Interval is intended to be compatible with that
      in Sequence Ontolgy
      ([SO:0000001](http://www.sequenceontology.org/browser/current_svn/term/SO:0000001)),
      with the exception that the GA4GH VR Interval may be
      zero-width. The SO definition is for an "extent greater than
      zero".
    oneOf:
      - $ref: '#/definitions/SimpleInterval'
      - $ref: '#/definitions/NestedInterval'
    discriminator:
      propertyName: type

  SimpleInterval:
    type: object
    properties:
      type:
        type: string
        enum: [SimpleInterval]
        default: SimpleInterval
      start:
        type: integer
        nullable: true
      end:
        type: integer
        nullable: true
    additionalProperties: false
    required:
      - start
      - end
    example:
      type: SimpleInterval
      start: 11
      end: 22

  NestedInterval:
    type: object
    properties:
      type:
        type: string
        enum: [NestedInterval]
        default: NestedInterval
      inner:
        $ref: '#/definitions/SimpleInterval'
      outer:
        $ref: '#/definitions/SimpleInterval'
    example:
      type: NestedInterval
      inner:
        type: SimpleInterval
        start: 20
        end: 30
      outer:
        type: SimpleInterval
        start: 10
        end: 40

  ############################################################################
  # States

  State:
    oneOf:
      - $ref: "#/definitions/SequenceState"
  
  SequenceState:
    type: object
    properties:
      type:
        type: string
        enum: [SequenceState]
        default: SequenceState
      sequence:
        type: string
        nullable: false
    required:
      - type
      - sequence
    example:
      type: SequenceState
      sequence: C

  ############################################################################
  # Basic types
  # These types are used solely within other definitions.

  DateTime:
    type: string
    format: "date-time"
  
  Id:
    description: >-
      A string that refers to an object uniquely.  The lifetime and
      scope of an id is defined by the sender.

      VR does not impose any contraints on strings used as ids in
      messages. However, to maximize sharability of data, the VR
      Specification RECOMMENDS that implementations use [W3C Compact
      URI (CURIE)](https://www.w3.org/TR/curie/) syntax.

      String CURIEs are represented as `prefix`:`reference` (W3C
      terminology), but often referred to as `namespace`:`accession`
      or `namespace`:`local id` colloquially.

      The VR specification also RECOMMENDS that `prefix` be defined in
      identifiers.org.

      The `reference` component is an unconstrained string.

      A CURIE is a URI.  URIs may *locate* objects (i.e., specify
      where to retrieve them) or *name* objects conceptually.  VR uses
      CURIEs primarily as a naming mechanism.

      Implementations MAY provide CURIE resolution mechanisms for
      prefixes to make these objects locatable.

      Using internal ids in public messages is strongly discouraged.

    type: string
    #pattern: '^\w[^:]+:.+$'
    example: "ga4gh:GA/01234abcde"      
